%% Systems Lab: Systems of ODEs in MATLAB
%
% In this lab, you will write your own ODE system solver for the Heun method 
% (or Improved Euler method), and compare its results to those of |ode45|.
%
% You will also learn how to save images in MATLAB.
% 
% Opening the m-file lab4.m in the MATLAB editor, step through each
% part using cell mode to see the results.  Compare the output with the
% PDF, which was generated from this m-file.
%
% There are four (4) exercises in this lab that are to be handed in at the
% end of the lab.  Write your solutions in the template, including
% appropriate descriptions in each step. Save the m-files and the pdf-file 
% for Exercise 4 and submit them online using Blackboard.
%
% MAT292, Fall 2016, Sinnamon & Sousa

%% Student Information
%
%  Student Name: Jiaxi Kang
%                                                                                
%  Student Number: 1002413328
%

%% Exercise 1
%
% Objective: Write your own ODE system solver using the Heun/Improved Euler 
% Method and compare it to |ode45|.
%
% Details: Consider the system of 2 ODEs:
%
%  |x1'=f(t,x1,x2)|
%  |x2'=g(t,x1,x2)|
%
% This m-file should be a function which accepts as variables 
% (t0,tN,x0,h), where t0 and tN are the start and end points of the 
% interval on which to solve the ODE, h is the stepsize, and x0 is a vector 
% for the initial condition of the system of ODEs |x(t0)=x0|.
% You may also want to pass the functions into the ODE the way |ode45| 
% does (check MATLAB labs 2 and 3).
%
% Your m-file should return a matrix where the first row has the
% approximation for |x1| and the second row has the approximation for
% |x2|.
% 
% Note: you will need to use a loop to do this exercise.  
% You will also need to recall the Heun/Improved Euler algorithm learned in lectures.  
%

%ODE 45 is very inaccurate in comparison to Improved Euler. It does not use
%enough time steps, so it is very "clunky" in its phase portrait. This can
%be seen in exercise 2.

%% Exercise 2
%
% Objective: Compare Heun with exact solution
%
% Details:  Consider the system of ODEs
%
%  |x1' = x1 / 2 - 2 x2|
%  |x2' = 5 x1 - x2 |
%
% with initial condition |x(0)=(1,1)|.
%
% Use your method from Exercise 1 to approximate the solution from |t=0|
% to |t=4*pi| with step size |h=0.05|.
%
% Compute the exact solution (by hand), and plot both phase portraits on 
% the same figure for comparison.
%
% Your submission should show the construction of the inline function, the
% use of your Heun's method to obtain the solution, a construction of the 
% exact solution, and a plot showing both.  In the comments, include the 
% exact solution.
%
% Label your axes and include a legend.

x0 = [1,1];
h = 0.05;
f1 = @(t, x1, x2) x1 ./ 2 - 2.*x2;
f2 = @(t, x1, x2) 5.*x1 - x2;

t0 = 0;
tN = 4*pi;

[x, t] = im_euler(t0,tN,x0, h, f1, f2);

%exact solution
% x1 = (1/151)*exp(-t/4)*(151*cos((sqrt(151)/4)*t) - 5*sqrt(151)*sin((sqrt(151)/4)*t))
% x2 = (1/151)*exp(-t/4)*(151*cos((sqrt(151)/4)*t) + 17*sqrt(151)*sin((sqrt(151)/4)*t));
x1 = @(t) (1/151).*exp(-t/4).*(151.*cos((sqrt(151)/4).*t) - 5*sqrt(151).*sin((sqrt(151)/4).*t));
x2 = @(t) (1/151).*exp(-t/4).*(151.*cos((sqrt(151)/4).*t) + 17*sqrt(151).*sin((sqrt(151)/4).*t));

% Comparing improved Euler to ODE45
% f = @(t, x1, x2) x1 ./ 2 - 2.*x2;
% g = @(t, x1, x2) 5.*x1 - x2;
% F = @(t,X) [f(t, X(1), X(2)); g(t, X(1), X(2))];
% 
% soln = ode45(F, [t0, tN], x0);
% 
% plot(x(1,:), x(2,:), soln.y(1,:), soln.y(2,:), x1(t), x2(t));

plot(x(1,:), x(2,:), x1(t), x2(t));
xlabel('x1');
ylabel('x2');
legend('Improved Euler', 'Exact Solution');
%% Exercise 3
%
% Objective: Compare your method with Euler's Method (from |iode|).
%
% Details: Use |iode| to plot the solution for the same problem with the same
% step size as on Exercise 2.
%
% Compare your solution on exercise 2, the exact solution from exercise 2
% and the approximation using Euler's method.
%
% You do not need to reproduce all the code here. Simply make note of any 
% differences and plot the graph.

[x_e, t] = euler(t0,tN,x0,h, f1, f2);

plot(x(1,:), x(2,:), x_e(1,:), x_e(2,:), x1(t), x2(t));
xlabel('x1');
ylabel('x2');
legend('Improved Euler', 'Euler', 'Exact Solution');

%The normal euler is very different from the improved and the exact
%solution. The normal euler does not spiral inwards like the other two,
%rather it is slowly spiraling outwards. This is because the Euler method
%does not look ahead to adjust the derivative. As a result if a spiral is
%present, the Euler will always overestimate continously and spiral
%outwards slowly instead of spiral outwards.


%% Saving Images in MATLAB
%
% To do the following exercises, you will need to know how to output 
% graphics from MATLAB.  Create a folder on your Desktop (or elsewhere) to 
% contain the files generated by these exercises.  Make this folder the 
% "Current Folder" in the left side of the main MATLAB window.  This will 
% ensure that the files output by MATLAB end up in the folder you created.
%
% To save an image of a phase portrait, use the following steps:
%
% 1. Get the phase portrait looking the way you want in the |iode| window.  
%
% 2. Leaving |iode| open, switch to the main MATLAB window.
%
% 3. Type the command |print -dpng -r300 'filename.png'| in the command 
% window.
%
% This command will create a PNG graphic called |filename.png| in the 
% current folder.  The |-dpng| option tells MATLAB to output the graphic in
% PNG format; MATLAB also allows output in other formats, such as BMP, EPS,
% PNG and SVG.  The |-r300| option tells MATLAB to set the resolution at 
% 300 dots per inch and can be adjusted if you wish.


%% Exercise 4
%
% Objective: Analyze phase portraits.
%
% Details: Compile the results of the following exercises into a single
% document (e.g. using a word processor) and export it to |PDF| for
% submission on Blackboard. 
%
% For each of the first-order systems of ODEs 4.1 to 4.10 below, do the
% following exercises:
%
% (a) Find the equilibrium solution.
%
% (b) Generate a phase portrait for the system (centre the graph on the
% equilibrium point). Include a few trajectories.
%
% (c) Classify the equilibrium on asymptotical stability, and behaviour 
% (sink, source, saddle-point, spiral, center, proper node, improper node) 
% - check table 3.5.1 and figure 3.5.7.
% Classify also as for clockwise or counterclockwise movement, when relevant.
%
% (d) Compute the eigenvalues of the matrix (you do not need to show your
% calculations). Using the eigenvalues you computed, justify part (c).
%
% To avoid numerical error, you should use Runge-Kutta solver with a step
% size of |0.01|. Change the display parameters, if necessary, to best
% understand the phase portrait.
%
% 4.1. |dx/dt = [3 4; 5 4] x - [2 1; 1 3] [4; 5]|
%
% 4.2. |dx/dt = [-3 -4; -5 -4] x - [13; 19]|
%
% 4.3. |dx/dt = [4  -2; 2 -1] x + [8; 4]|
%
% 4.4. |dx/dt = [-4  2; -2 1] x + [8; 4]|
%
% 4.5. |dx/dt = [0  -1; 1 -1] x + [1; 0]|
%
% 4.6. |dx/dt = [0  1; -1 1] x + [1; 0]|
%
% 4.7. |dx/dt = [-1  1; -5 1] x|
%
% 4.8. |dx/dt = [1  -1; 5 -1] x|
%
% 4.9. |dx/dt = [13  6; 3 20] x|
%
% 4.10. |dx/dt = [-13  -6; -3 -20] x|
%